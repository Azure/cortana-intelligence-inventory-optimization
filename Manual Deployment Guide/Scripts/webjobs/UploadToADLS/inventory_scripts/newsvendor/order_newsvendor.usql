// Use internal database for storing ordering times (order_times table) and orders

CREATE DATABASE IF NOT EXISTS NewsvendorOrderDB ;
USE DATABASE NewsvendorOrderDB;

CREATE TABLE IF NOT EXISTS dbo.Orders
(
    InventoryPolicyName string,
    StoreID string,
    ProductID string,
    SupplierID string,
    Quantity int,
    OrderTimestamp DateTime,
    [ETA] DateTime,
    ConfidenceInterval int,
    Fulfilled bool,
    INDEX clx_StoreID CLUSTERED(StoreID ASC) 
)
DISTRIBUTED BY HASH(StoreID);

////////////////////////////////////////////////
// Names of input files
////////////////////////////////////////////////

DECLARE @SolutionsCSVFolder string = "/optimization/output_csv/";
DECLARE @OrdersFolder string = "/orders/";
DECLARE @GlobalPolicyDir string = "/inventory_scripts/";
DECLARE @StaticDataFolder string = "/publicparameters/";

DECLARE @policy_name string = "newsvendor";

DECLARE @UsqlFolder string = @GlobalPolicyDir + @policy_name + "/";
DECLARE @SolutionDir string = @SolutionsCSVFolder + @policy_name + "/{StoreID}/";
DECLARE @SolutionFiles string = @SolutionDir + @policy_name + "_" +  
                                "{SolutionDate:yyyy}{SolutionDate:MM}{SolutionDate:dd}{SolutionDate:HH}{SolutionDate:mm}.csv";
DECLARE @ProductsSuppliersFile string = @StaticDataFolder + "store_product_supplier.csv";
DECLARE @PartialOrdersFiles string = @OrdersFolder + @policy_name + "/partial_orders_{*}.csv";

/////////////////////////////////////////////
// Load solutions
/////////////////////////////////////////////

@solutions_prelim = 
    EXTRACT StoreID                         string,
            SolutionDate                    DateTime,
            VarName                         string,
            Value                           string
    FROM @SolutionFiles
    USING Extractors.Csv(); 

@solutions = 
    SELECT StoreID, SolutionDate, VarName, Convert.ToInt32(Math.Round(Convert.ToDouble(Value),0)) AS Value FROM @solutions_prelim WHERE Value != "None";

// get the latest solution

@last_date = 
    SELECT StoreID, Convert.ToDateTime(MAX(SolutionDate)) AS LastDate 
    FROM @solutions GROUP BY StoreID;

@latest_solution = 
    SELECT a.StoreID, SolutionDate.ToString() AS SolutionDate, VarName, Value FROM @solutions AS a
    JOIN @last_date AS b ON a.StoreID == b.StoreID AND SolutionDate == LastDate;

@orders = SELECT StoreID, SolutionDate, Value AS Quantity,
                 VarName.Substring(VarName.IndexOf("[") + 1, 
                                   VarName.IndexOf("]") - VarName.IndexOf("[") - 1) AS ProductID
          FROM @latest_solution WHERE Value > 0;

////////////////////////////////////////////////////////////
// Add supplier data to orders
////////////////////////////////////////////////////////////

@product_suppliers = 
    EXTRACT StoreID                         string,
            SupplierID                      string,
            ProductID                       string,
            LeadTime                        int,
            LeadTimeConfidenceInterval      int,
            MinOrderQuantity                int,
            MaxOrderQuantity                int,
            QuantityMultiplier              int,
            PurchaseCost                    float,
            BackorderCost                   float,
            ShippingCost                    float,
            PurchaseCostBudget              float,
            OrderingFrequency               string,
            ServiceLevel                    float
    FROM @ProductsSuppliersFile
    USING Extractors.Csv(skipFirstNRows: 1); 

@orders_suppliers = SELECT @policy_name AS InventoryPolicyName, a.StoreID, a.ProductID, b.SupplierID, a.Quantity, 
                           Convert.ToDateTime(a.SolutionDate) AS OrderTimestamp,
                           Convert.ToDateTime(a.SolutionDate).Add(new System.TimeSpan(b.LeadTime, 0, 0, 0)) AS [ETA], 
                           b.LeadTimeConfidenceInterval, false AS Fulfilled
                    FROM @orders AS a JOIN @product_suppliers AS b
                    ON a.StoreID == b.StoreID AND a.ProductID == b.ProductID;

INSERT INTO dbo.Orders SELECT * FROM @orders_suppliers;

/////////////////////////////////////////////////////////////////////////////
// Update partial orders file
/////////////////////////////////////////////////////////////////////////////

DROP TABLE IF EXISTS dbo.PartialOrders;

@partial_orders = 
    EXTRACT  InventoryPolicyName string,
             StoreID string,
             ProductID string,
             SupplierID string,
             Quantity int,
             OrderTimestamp DateTime,
             [ETA] DateTime,
             ConfidenceInterval int,
             Fulfilled bool
    FROM @PartialOrdersFiles
    USING Extractors.Csv(skipFirstNRows: 1); 

CREATE TABLE dbo.PartialOrders
(
     INDEX clx_StoreID CLUSTERED(StoreID ASC)
     DISTRIBUTED BY HASH(StoreID)
) AS SELECT * FROM @partial_orders;

INSERT INTO dbo.PartialOrders SELECT * FROM @orders_suppliers;

/////////////////////////////////////////////////////////////////////////////
// Generate second USQL script that will create CSV files for all orders
/////////////////////////////////////////////////////////////////////////////

DECLARE @outfile_orders_store string = @OrdersFolder + @policy_name + "/" + "orders_";
DECLARE @outfile_partial_orders_store string = @OrdersFolder + @policy_name + "/" + "partial_orders_";

// Get IDs of all stores
@store_ids = SELECT DISTINCT StoreID FROM @product_suppliers;

@stmts = 
    SELECT * FROM (VALUES (1,"USE DATABASE NewsvendorOrderDB;")) AS i(id, output)
    UNION ALL
    SELECT 2 AS id, "OUTPUT (SELECT * FROM dbo.Orders WHERE StoreID == \"" +  StoreID + "\") TO \"" + @outfile_orders_store 
           + StoreID +  ".csv\" USING Outputters.Csv(outputHeader: true, quoting: false);" AS output 
    FROM @store_ids            
    UNION ALL
    SELECT 3 AS id, "OUTPUT (SELECT * FROM dbo.PartialOrders WHERE StoreID == \"" +  StoreID + "\") TO \"" + @outfile_partial_orders_store 
           + StoreID +  ".csv\" USING Outputters.Csv(outputHeader: true, quoting: false);" AS output
    FROM @store_ids;
         
DECLARE @outfile string = @UsqlFolder + "gen_orders_" + @policy_name + ".usql";

OUTPUT (SELECT output FROM @stmts ORDER BY id ASC OFFSET 0 ROWS) TO @outfile
USING Outputters.Text(delimiter: ' ', quoting: false);
