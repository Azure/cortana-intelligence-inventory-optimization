REFERENCE ASSEMBLY [ExtPython];

// This inventory optimization policy is used for SupplierID 2. We assume this supplier supplies products to all stores.

DECLARE @SupplierID string = "2";  
DECLARE @T int = 5;    // number of time periods
DECLARE @period_length int = 7; // number of days in each time period
DECLARE @now DateTime = DateTime.Now;
DECLARE @last_day DateTime = @now.Add(new System.TimeSpan(@T * @period_length, 0, 0, 0));

// Use internal database for transferring intermediate results between two USQL scripts
CREATE DATABASE IF NOT EXISTS CapacitatedDynLotSizingDB; 
USE DATABASE CapacitatedDynLotSizingDB;

////////////////////////////////////////////////
// Names of input and output directories 
////////////////////////////////////////////////

DECLARE @StaticDataFolder string = "/publicparameters/";
DECLARE @DynamicDataFolder string = "/rawdata/";
DECLARE @GlobalCSVFolder string = "/optimization/input_csv/";
DECLARE @GlobalPolicyDir string = "/inventory_scripts/";

DECLARE @policy_name string = "capacitated_dynlotsizing";
DECLARE @UsqlFolder string = @GlobalPolicyDir + @policy_name + "/";
DECLARE @CSVFolder string = @GlobalCSVFolder + @policy_name + "/";

////////////////////////////////////////////////
// Names of input files
////////////////////////////////////////////////

DECLARE @StoresFile string = @StaticDataFolder + "stores.csv";
DECLARE @SuppliersFile string = @StaticDataFolder + "suppliers.csv";
DECLARE @StorageFile string = @StaticDataFolder + "store_storage.csv";
DECLARE @ProductStorageFile = @StaticDataFolder + "store_product_storage.csv";
DECLARE @ProductsFile string = @StaticDataFolder + "brands_products.csv";
DECLARE @ProductsSuppliersFile string = @StaticDataFolder + "store_product_supplier.csv";
DECLARE @InventoryFile string = @DynamicDataFolder + "inv_store{*}.csv";
DECLARE @DemandDir string = @DynamicDataFolder + "demand_forecasts/{*}/{*}/";
DECLARE @DemandFiles string = @DemandDir + 
                              "{ForecastDate:yyyy}-{ForecastDate:MM}-{ForecastDate:dd}_{ForecastDate:HH}_{ForecastDate:mm}_{ForecastDate:ss}.csv";

/////////////////////////////////////////////
// Load input files
/////////////////////////////////////////////

@stores = 
    EXTRACT StoreID                    string,
            StoreName                  string,
            AverageHouseHoldIncome     float,
            AverageTraffic             float
    FROM @StoresFile
    USING Extractors.Csv(skipFirstNRows: 1);

@suppliers = 
    EXTRACT SupplierID            string,
            SupplierName          string,
            ShippingCost          float,
            MinShippingVolume     float,
            MaxShippingVolume     float,
            FixedOrderSize        float,
            PurchaseCostBudget    float
    FROM @SuppliersFile
    USING Extractors.Csv(skipFirstNRows: 1); 

@inventory = 
    EXTRACT StoreID                string,
            ProductID              string,
            Timestamp              DateTime,
            InventorySize          int,
            ExpirationTime         DateTime
    FROM @InventoryFile
    USING Extractors.Csv(skipFirstNRows: 1); 

@products =
    EXTRACT BrandID                string,
            ProductID              string,
            ProductName            string,
            [MSRP]                 float,
            ProductVolume          float,
            ShelfLife              string
    FROM @ProductsFile
    USING Extractors.Csv(skipFirstNRows: 1);

@product_suppliers = 
    EXTRACT StoreID                         string,
            SupplierID                      string,
            ProductID                       string,
            LeadTime                        int,
            LeadTimeConfidenceInterval      int,
            MinOrderQuantity                int,
            MaxOrderQuantity                int,
            QuantityMultiplier              int,
            PurchaseCost                    float,
            BackorderCost                   float,
            ShippingCost                    float,
            PurchaseCostBudget              float,
            OrderingFrequency               string,
            ServiceLevel                    float
    FROM @ProductsSuppliersFile
    USING Extractors.Csv(skipFirstNRows: 1); 

@product_storage =
    EXTRACT StoreID                string,
            StorageID              string,
            ProductID              string,
            StorageCost            float,
            MissedSaleCost         float,
            MinInventorySize       int,
            MaxInventorySize       int
    FROM @ProductStorageFile
    USING Extractors.Csv(skipFirstNRows: 1);  

@predicted_demand = 
    EXTRACT StoreID                         string,
            ProductID                       string,
            Timestamp                       DateTime,
            PredictedDemand                 float,
            PredictedDemandDistribution     string,
            PredictedDemandVariance         float,
            PredictedProbability            float,
            ForecastDate                    DateTime
    FROM @DemandFiles
    USING Extractors.Csv(skipFirstNRows: 1); 

/////////////////////////////////////////////////
// Store supplier data in database
//////////////////////////////////////////////////

DROP TABLE IF EXISTS dbo.Suppliers;
CREATE TABLE dbo.Suppliers (
    INDEX clx_SupplierID CLUSTERED(SupplierID ASC) 
    DISTRIBUTED BY HASH (SupplierID)
) AS SELECT * FROM @suppliers;

///////////////////////////////////////////////////////////////////////////
// Get names of the products that are supplied by a given supplier, 
// store the names in the database
//////////////////////////////////////////////////////////////////////////
  
@product_names = SELECT DISTINCT ProductName FROM @products AS a
                 JOIN @product_suppliers AS b ON a.ProductID == b.ProductID 
                 WHERE b.SupplierID == @SupplierID;

DROP TABLE IF EXISTS dbo.ProductNames;
CREATE TABLE dbo.ProductNames (
    INDEX clx_ProductName CLUSTERED(ProductName ASC) 
    DISTRIBUTED BY HASH (ProductName)
) AS SELECT * FROM @product_names;

//////////////////////////////////////////////////////////////////////////
// Create table of initial inventory, shipping and storage costs,
// store the table in the database
///////////////////////////////////////////////////////////////////////////

// Get current inventory

@inventory = SELECT * FROM @inventory AS a WHERE Timestamp <= @now AND (@now - Timestamp).Days < 1;

@inventory_supplier = SELECT b.StoreID, b.ProductID, a.InventorySize ?? 0 AS InventorySize
                      FROM @inventory AS a RIGHT OUTER JOIN @product_suppliers AS b
                      ON a.ProductID == b.ProductID AND a.StoreID == b.StoreID
                      WHERE b.SupplierID == @SupplierID;

// Get shipping costs

@shipping_costs = SELECT StoreID, ProductID, ShippingCost FROM @product_suppliers WHERE SupplierID == @SupplierID;

// Get storage costs

@storage_costs = SELECT a.StoreID, a.ProductID, StorageCost FROM @product_storage AS a 
                 JOIN @product_suppliers AS b ON a.ProductID == b.ProductID AND a.StoreID == b.StoreID
                 WHERE b.SupplierID == @SupplierID;

// Concatenate all columns and get product names

@init_inventory_shipping_storage_costs = SELECT a.StoreID, ProductName, InventorySize, ShippingCost, 
                                                StorageCost, ProductVolume
                                         FROM @inventory_supplier AS a 
                                         JOIN @shipping_costs AS b ON a.StoreID == b.StoreID AND a.ProductID == b.ProductID
                                         JOIN @storage_costs AS c ON a.StoreID == c.StoreID AND a.ProductID == c.ProductID
                                         JOIN @products AS d ON a.ProductID == d.ProductID;                        

DROP TABLE IF EXISTS dbo.InventoryCosts;
CREATE TABLE dbo.InventoryCosts (
    INDEX clx_ProductName CLUSTERED(ProductName ASC) 
    DISTRIBUTED BY HASH (ProductName)
) AS SELECT * FROM @init_inventory_shipping_storage_costs;

//////////////////////////////////////////////////////////////////////////////
// Generate table of predicted demand
//////////////////////////////////////////////////////////////////////////////

// Auxiliary Python function for creating t indices

DECLARE @myScript = @"
import pandas as pd

def usqlml_main(df):
    return pd.DataFrame({'t': range(1,df.iat[0,0]+1)})
";

@store_products = SELECT StoreID, a.ProductID, ProductName FROM @product_suppliers AS a 
                  JOIN @products AS b ON a.ProductID == b.ProductID
                  WHERE a.SupplierID == @SupplierID;
                                              
@t_indices = REDUCE (SELECT * FROM (VALUES(@T)) AS T([T])) ON [T]
             PRODUCE t int 
             USING new Extension.Python.Reducer(pyScript:@myScript);

@predicted_demand_supplier = SELECT a.StoreID, a.ProductID, ProductName, Timestamp, PredictedDemand, ForecastDate 
                             FROM @predicted_demand AS a JOIN @store_products AS b 
                             ON a.StoreID == b.StoreID AND a.ProductID == b.ProductID;

@last_forecast_time = SELECT StoreID, ProductID, Convert.ToDateTime(MAX(ForecastDate)) AS LastForecastDate 
                      FROM @predicted_demand_supplier GROUP BY StoreID, ProductID;

@latest_predicted_demand = SELECT a.StoreID, ProductName, Timestamp, PredictedDemand 
                           FROM @predicted_demand_supplier AS a 
                           JOIN @last_forecast_time AS b ON a.ProductID == b.ProductID AND a.StoreID == b.StoreID AND ForecastDate == LastForecastDate
                           WHERE Timestamp BETWEEN @now AND @last_day;

@latest_predicted_demand_time_period = SELECT StoreID, ProductName, PredictedDemand, t 
                                       FROM @latest_predicted_demand AS a CROSS JOIN @t_indices AS b 
                                       WHERE Timestamp BETWEEN @now.Add(new System.TimeSpan((b.t - 1) * @period_length, 0, 0, 0))
                                       AND @now.Add(new System.TimeSpan(b.t * @period_length, 0, 0, 0));

@latest_predicted_demand_aggregated_init = SELECT StoreID, ProductName, t, SUM(PredictedDemand) AS demand
                                           FROM @latest_predicted_demand_time_period GROUP BY StoreID, ProductName, t;

// if the input data has forecasts for less than @T * @period_length days
// add rows with predicted demand to @latest_predicted_demand_aggregated 

@last_t = SELECT StoreID, ProductName, Convert.ToInt32(MAX(t)) AS t FROM @latest_predicted_demand_aggregated_init
          GROUP BY StoreID, ProductName;

@last_known_demand = SELECT a.StoreID, a.ProductName, demand FROM @latest_predicted_demand_aggregated_init AS a 
                     JOIN @last_t AS b ON a.ProductName == b.ProductName AND a.StoreID == b.StoreID AND a.t == b.t;

@last_known_demand_t = SELECT StoreID, ProductName, demand, t FROM @last_known_demand CROSS JOIN @t_indices;

@latest_predicted_demand_aggregated = SELECT b.StoreID, b.ProductName, a.demand ?? b.demand AS demand, b.t 
                                      FROM @latest_predicted_demand_aggregated_init AS a 
                                      RIGHT OUTER JOIN @last_known_demand_t AS b ON a.ProductName == b.ProductName AND a.StoreID == b.StoreID AND a.t == b.t; 
                                                                                         
DROP TABLE IF EXISTS dbo.PredictedDemand;
CREATE TABLE dbo.PredictedDemand (
    INDEX clx_ProductName CLUSTERED(ProductName ASC) 
    DISTRIBUTED BY HASH (ProductName)
) AS SELECT * FROM @latest_predicted_demand_aggregated;

/////////////////////////////////////////////////////////////////////////////
// Generate second USQL script that will create CSV files for all stores
/////////////////////////////////////////////////////////////////////////////

// Get IDs of all stores

@store_ids = SELECT StoreID FROM @stores;

// Create USQL commands to be writted in the second script

@stmts = 
    SELECT * FROM (VALUES (1,"REFERENCE ASSEMBLY [ExtPython];"), 
                          (2,"USE DATABASE CapacitatedDynLotSizingDB;"), 
                          (3,"DECLARE @myScript = @\"" + @myScript + "\";")) AS i(id, output)
    UNION ALL        
    SELECT 4 AS id, "OUTPUT (SELECT MaxShippingVolume AS [C] FROM dbo.Suppliers WHERE SupplierID == \"" + @SupplierID + 
           "\") TO \"" + @CSVFolder + StoreID + "/capacitated_dynlotsizing_1_P_0_" + StoreID + 
           ".csv\" USING Outputters.Csv(outputHeader: true, quoting: false);" AS output
    FROM @store_ids
    UNION ALL
    SELECT 5 AS id, "OUTPUT (SELECT ProductName AS [P] FROM dbo.ProductNames) TO \"" + @CSVFolder + StoreID + 
           "/capacitated_dynlotsizing_2_S_0_" + StoreID + 
           ".csv\" USING Outputters.Csv(outputHeader: true, quoting: false);" AS output
    FROM @store_ids
    UNION ALL
    SELECT 6 AS id, "OUTPUT (SELECT ProductName AS [P], InventorySize AS init_inventory, ShippingCost AS [K], StorageCost AS [h], ProductVolume AS [v] " +
                    "FROM dbo.InventoryCosts WHERE StoreID == \"" + StoreID + "\") " +
                    "TO \"" + @CSVFolder + StoreID + "/capacitated_dynlotsizing_3_P_1_" + StoreID + 
                    ".csv\" USING Outputters.Csv(outputHeader: true, quoting: false);" AS output  
    FROM @store_ids       
    UNION ALL
    SELECT 7 AS id, "OUTPUT (SELECT [T] FROM (VALUES(" + @T + ")) AS T([T])) " +
           "TO \"" + @CSVFolder + StoreID + "/capacitated_dynlotsizing_4_P_0_" + StoreID + 
           ".csv\" USING Outputters.Csv(outputHeader: true, quoting: false);" AS output
    FROM @store_ids
    UNION ALL
    SELECT 8 AS id, "OUTPUT (REDUCE (SELECT * FROM (VALUES(" + @T + ")) AS T([T])) ON [T] " +
                            "PRODUCE t int USING new Extension.Python.Reducer(pyScript:@myScript)) " +
           "TO \"" + @CSVFolder + StoreID + "/capacitated_dynlotsizing_5_P_0_" + StoreID + 
           ".csv\" USING Outputters.Csv(outputHeader: true, quoting: false);" AS output
    FROM @store_ids
    UNION ALL
    SELECT 9 AS id, "OUTPUT (SELECT t, ProductName AS [P], demand FROM dbo.PredictedDemand WHERE StoreID == \"" + StoreID + "\") " +
                    "TO \"" + @CSVFolder + StoreID + "/capacitated_dynlotsizing_6_P_2_" + StoreID + 
                    ".csv\" USING Outputters.Csv(outputHeader: true, quoting: false);" AS output
    FROM @store_ids;                

// Write USQL commands to the second script

DECLARE @outfile string = @UsqlFolder + "genscript_capacitated_dynlotsizing.usql";

OUTPUT (SELECT output FROM @stmts ORDER BY id ASC OFFSET 0 ROWS) TO @outfile
USING Outputters.Text(delimiter: ' ', quoting: false);
