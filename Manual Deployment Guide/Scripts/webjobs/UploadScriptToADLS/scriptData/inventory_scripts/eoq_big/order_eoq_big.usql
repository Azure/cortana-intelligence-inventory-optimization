REFERENCE ASSEMBLY [ExtPython];

////////////////////////////////////////////////
// constants of inventory management policy
////////////////////////////////////////////////

DECLARE @StoreID string = "1";
DECLARE @StorageID string = "1";
DECLARE @planning_horizon int = 30;

//////////////////////////////////////////////////////////////////////////
// Define internal database for storing ordering times (OrderTimes table)
//////////////////////////////////////////////////////////////////////////

CREATE DATABASE IF NOT EXISTS EOQBigOrderDB;
USE DATABASE EOQBigOrderDB;

CREATE TABLE IF NOT EXISTS dbo.OrderTimes
(
    ProductName  string,
    TimePeriodID int,
    time DateTime,
    size int,
    processed int,
    INDEX clx_TimePeriodID CLUSTERED(TimePeriodID ASC) 
)
DISTRIBUTED BY HASH(TimePeriodID);

////////////////////////////////////////////////
// Names of input files
////////////////////////////////////////////////

DECLARE @SolutionsCSVFolder string = "/optimization/output_csv/";
DECLARE @OrdersFolder string = "/orders/";
DECLARE @StaticDataFolder string = "/publicparameters/";
DECLARE @DynamicDataFolder string = "/rawdata/";

DECLARE @policy_name string = "eoq_big";

DECLARE @SolutionDir string = @SolutionsCSVFolder + @policy_name + "/";
DECLARE @SolutionFiles string = @SolutionDir + @policy_name + "_" +  
                                "{SolutionDate:yyyy}{SolutionDate:MM}{SolutionDate:dd}{SolutionDate:HH}{SolutionDate:mm}.csv";
DECLARE @ProductStorageFile = @StaticDataFolder + "store_product_storage.csv";
DECLARE @ProductsFile string = @StaticDataFolder + "brands_products.csv";
DECLARE @ProductsSuppliersFile string = @StaticDataFolder + "store_product_supplier.csv";
DECLARE @OrdersFile string = @OrdersFolder + @policy_name + "/orders_" + @StoreID + "{*}.csv";
DECLARE @PartialOrdersFile string = @OrdersFolder + @policy_name + "/partial_orders_" + @StoreID + "{*}.csv";
DECLARE @DemandDir string = @DynamicDataFolder + "demand_forecasts/{*}/{*}/";
DECLARE @DemandFiles string = @DemandDir + 
                              "{ForecastDate:yyyy}-{ForecastDate:MM}-{ForecastDate:dd}_{ForecastDate:HH}_{ForecastDate:mm}_{ForecastDate:ss}.csv";

/////////////////////////////////////////////
// Load solutions
/////////////////////////////////////////////

@solutions_prelim = 
    EXTRACT SolutionDate DateTime,
            VarName  string,
            Value    string
    FROM @SolutionFiles
    USING Extractors.Csv(); 

@solutions = 
    SELECT SolutionDate, VarName FROM @solutions_prelim WHERE Value == "1" ;

// get the latest solution
@latest_solution_time = 
    SELECT Convert.ToDateTime(MAX(SolutionDate)) AS LastDate FROM @solutions;

@latest_solution = 
    SELECT SolutionDate.ToString() AS SolutionDate, VarName.Substring(2,VarName.LastIndexOf(',')-2) AS ProductName, 
           Convert.ToInt32(VarName.Substring(VarName.LastIndexOf(',')+1,VarName.Length-VarName.LastIndexOf(',')-2)) AS Value 
    FROM @solutions AS a JOIN @latest_solution_time AS b ON SolutionDate == LastDate;

//////////////////////////////////////////////////////////////////////
// Load additional input files
//////////////////////////////////////////////////////////////////////

@products_storage =
    EXTRACT StoreID                string,
            StorageID              string,
            ProductID              string,
            StorageCost            float,
            MissedSaleCost         float,
            MinInventorySize       int,
            MaxInventorySize       int
    FROM @ProductStorageFile
    USING Extractors.Csv(skipFirstNRows: 1);    

@products =
    EXTRACT BrandID                string,
            ProductID              string,
            ProductName            string,
            [MSRP]                 float,
            ProductVolume          float,
            ShelfLife              string
    FROM @ProductsFile
    USING Extractors.Csv(skipFirstNRows: 1); 

//////////////////////////////////////////////////////////////////////
// Load predicted demand used for solving EOQ optimization problem
//////////////////////////////////////////////////////////////////////

@predicted_demand_all = 
    EXTRACT StoreID                         string,
            ProductID                       string,
            Timestamp                       DateTime,
            PredictedDemand                 float,
            PredictedDemandDistribution     string,
            PredictedDemandVariance         float,
            PredictedProbability            float,
            ForecastDate                    DateTime
    FROM @DemandFiles
    USING Extractors.Csv(skipFirstNRows: 1); 

@predicted_demand = SELECT ProductName, Math.Round(Convert.ToDouble(SUM(PredictedDemand))) AS PredictedDemand FROM @predicted_demand_all AS a
                    JOIN @latest_solution_time AS b ON a.ForecastDate == b.LastDate
                    JOIN @products_storage AS c ON a.StoreID == c.StoreID AND a.ProductID == c.ProductID
                    JOIN @products AS d ON a.ProductID == d.ProductID                            
                    WHERE a.StoreID == @StoreID AND c.StorageID == @StorageID 
                          AND Timestamp BETWEEN b.LastDate AND b.LastDate.Add(new System.TimeSpan(@planning_horizon - 1, 0, 0, 0))
                    GROUP BY ProductName;

// combine total demand and order sizes into a single table
@solution_size_frequency = SELECT a.ProductName, Math.Round(Value) AS Value, PredictedDemand 
                           FROM @latest_solution AS a JOIN @predicted_demand AS b 
                           ON a.ProductName == b.ProductName;    

///////////////////////////////////////////////////////////////
// reset order_times table, if needed
///////////////////////////////////////////////////////////////

@python_input_order_times = SELECT a.*, b.TimePeriodID, b.time.ToString() AS time, b.size, b.processed, 
                                   c.LastDate.ToString() AS SolutionTime, @planning_horizon AS planning_horizon
                            FROM @solution_size_frequency AS a 
                            LEFT OUTER JOIN dbo.OrderTimes AS b ON a.ProductName == b.ProductName
                            CROSS JOIN @latest_solution_time AS c;

DECLARE @resetOrderSchedule = @"
import pandas as pd
import numpy as np
from datetime import datetime
from datetime import timedelta
import sys

def usqlml_main(df):

    def convert_str(x):
        if x[0] == 'b':
            return x[2:-1]
        else:
            return x

    curr_solution = df[['ProductName', 'Value', 'PredictedDemand']].drop_duplicates()
    solution_time = datetime.strptime(convert_str(df['SolutionTime'].iat[0]), '%m/%d/%Y %I:%M:%S %p')

    curr_orders = df[['ProductName', 'TimePeriodID', 'time', 'size', 'processed']].drop_duplicates()

    if curr_orders.shape[0] != 0 and curr_orders['time'].iat[0] != '':
        curr_orders['time'] = curr_orders['time'].apply(lambda x: datetime.strptime(convert_str(x), '%m/%d/%Y %I:%M:%S %p'))
        start_planning_time = curr_orders['time'].min()
    else:
        start_planning_time = np.nan

    if pd.isnull(start_planning_time) or solution_time > start_planning_time:
        # initialize orders schedule
        planning_horizon = df['planning_horizon'].iat[0]
        new_order_times = pd.DataFrame(columns=['ProductName', 'TimePeriodID', 'time', 'size', 'processed'])

        for row in curr_solution.itertuples():

            # compute number of orders
            T = int(round(row.PredictedDemand / row.Value))            

            # compute frequency of orders
            frequency = df['planning_horizon'].iat[0] / T

            if frequency < 1:
                # adjust solution of optimization problem if the frequency of orders higher than once in a day
                frequency = 1
                T = planning_horizon
                value = int(row.PredictedDemand / T)
            else:
                value = row.Value

            # compute size of each order            
            order_size = pd.Series([value] * T)
            surplus = row.PredictedDemand - value * T
            if surplus > 0:
                surplus_order = int(surplus / T)
                order_size += surplus_order
                second_surplus = int(surplus - surplus_order * T)
                order_size[:second_surplus] += 1
            elif surplus < 0:
                order_size[T-1] += surplus # we add negative surplus ()            

            # compute date of each order    
            deltas = pd.Series([int(frequency)] * T)       
            surplus = planning_horizon - int(frequency) * T
            deltas[(T-surplus):] += 1
            order_date = [solution_time]
            for x in deltas:
                order_date += [order_date[-1] + timedelta(days=int(x))]
            del order_date[-1]

            product_orders_schedule = pd.DataFrame({'ProductName': row.ProductName, 'TimePeriodID': range(1,T+1), 
                                                    'time': order_date, 'size': order_size, 'processed': int(0)}, 
                                                   columns = ['ProductName', 'TimePeriodID', 'time', 'size', 'processed'])
            new_order_times = pd.concat([new_order_times, product_orders_schedule])         
            
        new_order_times['time'] = new_order_times['time'].apply(lambda x: datetime.strftime(x, '%m/%d/%Y %I:%M:%S %p'))
        int_cols = ['TimePeriodID', 'size', 'processed']
        new_order_times[int_cols] = new_order_times[int_cols].astype('int32')
    else:
        if pd.notnull(start_planning_time):
            # the order schedule for the latest solution was already created previously. Order schedule remains unchanged.
            curr_orders['time'] = curr_orders['time'].apply(lambda x: datetime.strftime(x, '%m/%d/%Y %I:%M:%S %p'))
        new_order_times = curr_orders
    
    return new_order_times
";

@order_times = REDUCE @python_input_order_times
               ON planning_horizon
               PRODUCE ProductName string,
                       TimePeriodID int, 
                       time string,
                       size int,
                       processed int
               USING new Extension.Python.Reducer(pyScript:@resetOrderSchedule);

////////////////////////////////////////////////////////////////////
// create new orders, if needed
////////////////////////////////////////////////////////////////////

DECLARE @current_time string = DateTime.Now.ToString();

@python_input_orders = SELECT *, @current_time AS current_time FROM @order_times;

DECLARE @createOrders = @"
import pandas as pd
from datetime import datetime

# this code is executed in parallel for all products
def usqlml_main(df):

    def convert_str(x):
        if x[0] == 'b':
            return x[2:-1]
        else:
            return x
     
    # check if we need to place orders
    x = df['current_time'].iat[0]
    current_time = datetime.strptime(convert_str(x), '%m/%d/%Y %I:%M:%S %p')
    df['time'] = df['time'].apply(lambda x: datetime.strptime(convert_str(x), '%m/%d/%Y %I:%M:%S %p'))
    next_processing_time = df.loc[df['processed'] == 0,'time'].min()

    if current_time < next_processing_time:
        # we don't need to place orders
        r = pd.DataFrame(columns = ['ProductName','Quantity','OrderTimestamp'])
        r['Quantity'] = r['Quantity'].astype('int32')
        return r
    else:
        # we are going to place order
        order_size = df.loc[df['time'] == next_processing_time, 'size'].iat[0]
        order = pd.DataFrame({'ProductName': df['ProductName'].iat[0], 
                              'Quantity': int(order_size), 'OrderTimestamp': df['current_time'].iat[0]}, 
                              index = [1], columns = ['ProductName','Quantity','OrderTimestamp'])
        order['Quantity'] = order['Quantity'].astype('int32')
        return order
";

@orders = REDUCE @python_input_orders ON ProductName
          PRODUCE ProductName string,
                  Quantity int,
                  OrderTimestamp string
          USING new Extension.Python.Reducer(pyScript:@createOrders);

//////////////////////////////////////////////////////////
// Update order_times table
/////////////////////////////////////////////////////////

DECLARE @updateOrderTimes = @"
import pandas as pd
from datetime import datetime

def usqlml_main(df):
    
    def convert_str(x):
        if x[0] == 'b':
            return x[2:-1]
        else:
            return x
    
    # check if we need to place orders
    x = df['current_time'].iat[0]
    current_time = datetime.strptime(convert_str(x),'%m/%d/%Y %I:%M:%S %p')
    df['time'] = df['time'].apply(lambda x: datetime.strptime(convert_str(x), '%m/%d/%Y %I:%M:%S %p'))
    next_processing_time = df.loc[df['processed'] == 0,'time'].min()
    if current_time >= next_processing_time:
        df.loc[df['time'] == next_processing_time, 'processed'] = 1
    df['time'] = df['time'].apply(lambda x: datetime.strftime(x, '%m/%d/%Y %I:%M:%S %p'))

    return df[['ProductName', 'TimePeriodID', 'time', 'size', 'processed']]
";

@updated_order_times = REDUCE (SELECT * FROM @python_input_orders) ON current_time
                       PRODUCE ProductName string,
                               TimePeriodID int, 
                               time string,
                               size int,
                               processed int                                                            
                       USING new Extension.Python.Reducer(pyScript:@updateOrderTimes);      

DROP TABLE dbo.OrderTimes;

CREATE TABLE dbo.OrderTimes (
    INDEX clx_TimePeriodID CLUSTERED(TimePeriodID ASC) 
    DISTRIBUTED BY HASH (TimePeriodID)
) AS SELECT ProductName, TimePeriodID, Convert.ToDateTime(time) AS time, size, processed FROM @updated_order_times;

////////////////////////////////////////////////////////////
// Add StoreID, ProductID and supplier data to orders
////////////////////////////////////////////////////////////

@product_suppliers = 
    EXTRACT StoreID                         string,
            SupplierID                      string,
            ProductID                       string,
            LeadTime                        int,
            LeadTimeConfidenceInterval      int,
            MinOrderQuantity                int,
            MaxOrderQuantity                int,
            QuantityMultiplier              int,
            PurchaseCost                    float,
            BackorderCost                   float,
            ShippingCost                    float,
            PurchaseCostBudget              float,
            OrderingFrequency               string,
            ServiceLevel                    float
    FROM @ProductsSuppliersFile
    USING Extractors.Csv(skipFirstNRows: 1); 

@orders_suppliers = SELECT @policy_name AS InventoryPolicyName, @StoreID AS StoreID, b.ProductID, c.SupplierID, a.Quantity, 
                           Convert.ToDateTime(a.OrderTimestamp) AS OrderTimestamp,
                           Convert.ToDateTime(a.OrderTimestamp).Add(new System.TimeSpan(c.LeadTime, 0, 0, 0)) AS [ETA], 
                           c.LeadTimeConfidenceInterval, false AS Fulfilled
                    FROM @orders AS a JOIN @products AS b ON a.ProductName == b.ProductName
                    JOIN @product_suppliers AS c ON b.ProductID == c.ProductID
                    WHERE c.StoreID == @StoreID;

/////////////////////////////////////////////////////////////////////////////
// Update orders file
/////////////////////////////////////////////////////////////////////////////

@existing_orders = 
    EXTRACT  InventoryPolicyName string,
             StoreID string,
             ProductID string,
             SupplierID string,
             Quantity int,
             OrderTimestamp DateTime,
             [ETA] DateTime,
             ConfidenceInterval int,
             Fulfilled bool
    FROM @OrdersFile
    USING Extractors.Csv(skipFirstNRows: 1); 

@all_orders = SELECT * FROM @existing_orders
              UNION ALL
              SELECT * FROM @orders_suppliers;

DECLARE @orders_fname string = @OrdersFolder + @policy_name + "/orders_" + @StoreID + ".csv";
OUTPUT (SELECT * FROM @all_orders) TO @orders_fname
USING Outputters.Csv(outputHeader: true, quoting: false);

////////////////////////////////////////////////////////////////////////////
// Update partial orders file
/////////////////////////////////////////////////////////////////////////////

@existing_partial_orders = 
    EXTRACT  InventoryPolicyName string,
             StoreID string,
             ProductID string,
             SupplierID string,
             Quantity int,
             OrderTimestamp DateTime,
             [ETA] DateTime,
             ConfidenceInterval int,
             Fulfilled bool
    FROM @PartialOrdersFile
    USING Extractors.Csv(skipFirstNRows: 1); 

@all_partial_orders = SELECT * FROM @existing_partial_orders
                      UNION ALL
                      SELECT * FROM @orders_suppliers;

DECLARE @partial_orders_fname string = @OrdersFolder + @policy_name + "/partial_orders_" + @StoreID + ".csv";
OUTPUT (SELECT * FROM @all_partial_orders) TO @partial_orders_fname
USING Outputters.Csv(outputHeader: true, quoting: false);

