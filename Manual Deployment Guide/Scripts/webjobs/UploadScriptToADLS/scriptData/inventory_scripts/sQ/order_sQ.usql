REFERENCE ASSEMBLY [ExtPython];

DECLARE @current_time string = DateTime.Now.ToString();

// Use internal database for storing ordering times (order_times table) and orders

CREATE DATABASE IF NOT EXISTS SQOrderDB ;
USE DATABASE SQOrderDB;

////////////////////////////////////////////////
// Names of input files
////////////////////////////////////////////////

DECLARE @SolutionsCSVFolder string = "/optimization/output_csv/";
DECLARE @OrdersFolder string = "/orders/";
DECLARE @GlobalPolicyDir string = "/inventory_scripts/";
DECLARE @StaticDataFolder string = "/publicparameters/";
DECLARE @RawDataFolder string = "/rawdata/";

DECLARE @policy_dir string = "sQ";
DECLARE @policy_name string = "s_Q";

DECLARE @UsqlFolder string = @GlobalPolicyDir + @policy_dir + "/";
DECLARE @SolutionDir string = @SolutionsCSVFolder + @policy_dir + "/{StoreID}/{ProductID}/";
DECLARE @SolutionFiles string = @SolutionDir +  @policy_name + "_" +  
                                "{SolutionDate:yyyy}{SolutionDate:MM}{SolutionDate:dd}{SolutionDate:HH}{SolutionDate:mm}.csv";
DECLARE @ProductsSuppliersFile string = @StaticDataFolder + "store_product_supplier.csv";
DECLARE @OrdersFiles string = @OrdersFolder + @policy_dir + "/orders_{*}.csv";
DECLARE @PartialOrdersFiles string = @OrdersFolder + @policy_dir + "/partial_orders_{*}.csv";
DECLARE @InventoryFiles string = @RawDataFolder + "inv_store{*}.csv";

/////////////////////////////////////////////
// Load solutions
/////////////////////////////////////////////

@previous_orders = 
    EXTRACT  InventoryPolicyName string,
             StoreID string,
             ProductID string,
             SupplierID string,
             Quantity int,
             OrderTimestamp DateTime,
             [ETA] DateTime,
             ConfidenceInterval int,
             Fulfilled bool
    FROM @OrdersFiles
    USING Extractors.Csv(skipFirstNRows: 1); 

@solutions_prelim = 
    EXTRACT StoreID                         string,
            ProductID                       string,
            SolutionDate                    DateTime,
            VarName                         string,
            Value                           string
    FROM @SolutionFiles
    USING Extractors.Csv(); 

@solutions = 
    SELECT StoreID, ProductID, SolutionDate, VarName, Convert.ToInt32(Math.Round(Convert.ToDouble(Value),0)) AS Value 
    FROM @solutions_prelim WHERE Value != "None";

// get the latest solution

@last_date = 
    SELECT StoreID, ProductID, Convert.ToDateTime(MAX(SolutionDate)) AS LastDate 
    FROM @solutions GROUP BY StoreID, ProductID;

@latest_solution = 
    SELECT a.StoreID, a.ProductID, SolutionDate.ToString() AS SolutionDate, VarName, Value FROM @solutions AS a
    JOIN @last_date AS b ON a.StoreID == b.StoreID AND a.ProductID == b.ProductID AND SolutionDate == LastDate;

////////////////////////////////////////////////////////////
// Read supplier data
////////////////////////////////////////////////////////////

@product_suppliers = 
    EXTRACT StoreID                         string,
            SupplierID                      string,
            ProductID                       string,
            LeadTime                        int,
            LeadTimeConfidenceInterval      int,
            MinOrderQuantity                int,
            MaxOrderQuantity                int,
            QuantityMultiplier              int,
            PurchaseCost                    float,
            BackorderCost                   float,
            ShippingCost                    float,
            PurchaseCostBudget              float,
            OrderingFrequency               string,
            ServiceLevel                    float
    FROM @ProductsSuppliersFile
    USING Extractors.Csv(skipFirstNRows: 1); 

///////////////////////////////////////////////////////////
// Read current inventory data
////////////////////////////////////////////////////////////

@inventory_prelim = 
    EXTRACT StoreID                         string,
            ProductID                       string,
            InventoryDateTime               DateTime,
            Units                           int,
            ExpiryDateTime                  DateTime
    FROM @InventoryFiles
    USING Extractors.Csv(skipFirstNRows: 1); 

@max_date = SELECT Convert.ToDateTime(MAX(InventoryDateTime)) AS MaxDate FROM @inventory_prelim;

@inventory_latest = SELECT a.* FROM @inventory_prelim AS a
                    JOIN @max_date AS b ON a.InventoryDateTime == b.MaxDate;

@inventory = SELECT a.StoreID, a.ProductID, Units ?? 0 AS Units FROM @product_suppliers AS a
             LEFT OUTER JOIN @inventory_latest AS b ON a.StoreID == b.StoreID AND a.ProductID == b.ProductID;
			                                                   
@total_inventory = 
    SELECT StoreID, ProductID, SUM(Units) AS Units FROM @inventory GROUP BY StoreID, ProductID;

@inventory_solution = SELECT a.StoreID, a.ProductID, Units, VarName, Value,  @current_time AS OrderTimestamp,
                             Convert.ToString(OrderTimestamp) AS PrevOrderTimestamp, Convert.ToString([ETA]) AS [ETA]                                                
                      FROM @latest_solution AS a 
                      JOIN @total_inventory AS b ON a.StoreID == b.StoreID AND a.ProductID == b.ProductID
                      LEFT OUTER JOIN @previous_orders AS c ON a.StoreID == c.StoreID AND a.ProductID == c.ProductID;

OUTPUT (SELECT * FROM @inventory_solution) TO "/tmp/inventory_solution.txt"
USING Outputters.Csv(outputHeader: true, quoting: false);

DECLARE @createOrders = @"
import pandas as pd

def usqlml_main(df):
    
    etas = df['ETA'].drop_duplicates()
    try_place_orders = False
    if len(etas) == 1 and etas[0] == '':
        try_place_orders = True        # no previous orders, we can place new orders
    else:
       if etas[0][0] == 'b':
           etas_dt = etas.apply(lambda x: pd.to_datetime(x.split(chr(39))[1]))
       else:
           etas_dt = etas.apply(lambda x: pd.to_datetime(x))
       latest_eta = max(etas_dt)
       if df['OrderTimestamp'].iat[0][0] == 'b':
           x = df['OrderTimestamp'].iat[0]
           current_timestamp = pd.to_datetime(x.split(chr(39))[1])
       else:
           current_timestamp = pd.to_datetime(df['OrderTimestamp'].iat[0])
       if current_timestamp > latest_eta: 
           try_place_orders = True      # the last order was delivered, we can place new orders
    
    if try_place_orders == False:
        orders = pd.DataFrame(columns=[['StoreID','ProductID','Quantity','OrderTimestamp']]) 
        orders['Quantity'] = orders['Quantity'].astype('int')
        return orders
    
    solution = df[['StoreID', 'ProductID', 'Units', 'VarName', 'Value', 'OrderTimestamp']].drop_duplicates()
    if solution['VarName'].iat[0][0] != 'b':
        s = solution[solution['VarName'] == 's']
        Q = solution[solution['VarName'] == 'Q']
    else:
        s = solution[solution['VarName'] == 'b' + chr(39) + 's' + chr(39)]
        Q = solution[solution['VarName'] == 'b' + chr(39) + 'Q' + chr(39)]
    Q = Q.rename(columns = {'Value': 'Quantity', 'Units': 'CurrentInventory'})
    del Q['OrderTimestamp']
    
    critical_products = s.query('Units <= Value')
    if critical_products.shape[0] > 0:
        orders = pd.merge(critical_products, Q, on=['StoreID','ProductID'])
        orders['Quantity'] += orders['Value'] - orders['CurrentInventory']
        orders['Quantity'] = orders['Quantity'].astype('int')
        return orders[['StoreID','ProductID','Quantity','OrderTimestamp']]
    else:
        orders = pd.DataFrame(columns=[['StoreID','ProductID','Quantity','OrderTimestamp']]) 
        orders['Quantity'] = orders['Quantity'].astype('int')
        return orders
";

@orders = REDUCE @inventory_solution ON StoreID, ProductID
          PRODUCE StoreID string, 
                  ProductID string,
                  Quantity int,
                  OrderTimestamp string
          USING new Extension.Python.Reducer(pyScript:@createOrders);

////////////////////////////////////////////////////////////
// Add supplier data to orders
////////////////////////////////////////////////////////////

@orders_suppliers = SELECT @policy_name AS InventoryPolicyName, a.StoreID, a.ProductID, b.SupplierID, a.Quantity, 
                           Convert.ToDateTime(a.OrderTimestamp) AS OrderTimestamp,
                           Convert.ToDateTime(a.OrderTimestamp).Add(new System.TimeSpan(b.LeadTime, 0, 0, 0)) AS [ETA], 
                           b.LeadTimeConfidenceInterval, false AS Fulfilled
                    FROM @orders AS a JOIN @product_suppliers AS b
                    ON a.StoreID == b.StoreID AND a.ProductID == b.ProductID;

@new_orders = SELECT * FROM @previous_orders
              UNION ALL
              SELECT * FROM @orders_suppliers;

DROP TABLE IF EXISTS dbo.Orders;

CREATE TABLE dbo.Orders
(
     INDEX clx_StoreID CLUSTERED(StoreID ASC)
     DISTRIBUTED BY HASH(StoreID)
) AS SELECT * FROM @new_orders;

/////////////////////////////////////////////////////////////////////////////
// Update partial orders file
/////////////////////////////////////////////////////////////////////////////

DROP TABLE IF EXISTS dbo.PartialOrders;

@previous_partial_orders = 
    EXTRACT  InventoryPolicyName string,
             StoreID string,
             ProductID string,
             SupplierID string,
             Quantity int,
             OrderTimestamp DateTime,
             [ETA] DateTime,
             ConfidenceInterval int,
             Fulfilled bool
    FROM @PartialOrdersFiles
    USING Extractors.Csv(skipFirstNRows: 1); 

CREATE TABLE dbo.PartialOrders
(
     INDEX clx_StoreID CLUSTERED(StoreID ASC)
     DISTRIBUTED BY HASH(StoreID)
) AS SELECT * FROM @previous_partial_orders;

INSERT INTO dbo.PartialOrders SELECT * FROM @orders_suppliers;

/////////////////////////////////////////////////////////////////////////////
// Generate second USQL script that will create CSV files for all orders
/////////////////////////////////////////////////////////////////////////////

DECLARE @outfile_orders_store string = @OrdersFolder + @policy_dir + "/" + "orders_";
DECLARE @outfile_partial_orders_store string = @OrdersFolder + @policy_dir + "/" + "partial_orders_";

// Get IDs of all stores
@store_ids = SELECT DISTINCT StoreID FROM @product_suppliers;

@stmts = 
    SELECT * FROM (VALUES (1,"USE DATABASE SQOrderDB;")) AS i(id, output)
    UNION ALL
    SELECT 2 AS id, "OUTPUT (SELECT * FROM dbo.Orders WHERE StoreID == \"" +  StoreID + "\") TO \"" + @outfile_orders_store 
           + StoreID +  ".csv\" USING Outputters.Csv(outputHeader: true, quoting: false);" AS output 
    FROM @store_ids            
    UNION ALL
    SELECT 3 AS id, "OUTPUT (SELECT * FROM dbo.PartialOrders WHERE StoreID == \"" +  StoreID + "\") TO \"" + @outfile_partial_orders_store 
           + StoreID +  ".csv\" USING Outputters.Csv(outputHeader: true, quoting: false);" AS output
    FROM @store_ids;
         
DECLARE @outfile string = @UsqlFolder + "gen_orders_" + @policy_dir + ".usql";

OUTPUT (SELECT output FROM @stmts ORDER BY id ASC OFFSET 0 ROWS) TO @outfile
USING Outputters.Text(delimiter: ' ', quoting: false);
