REFERENCE ASSEMBLY [ExtPython];

// we assume that each product is supplied by a single supplier

DECLARE @planning_time int = 30; // number of days in planning time period
DECLARE @now DateTime = DateTime.Now;
DECLARE @last_day DateTime = @now.Add(new System.TimeSpan(@planning_time, 0, 0, 0));
@departments = SELECT * FROM (VALUES ("3"), ("4")) AS Table(DepartmentID);

// Use internal database for transferring intermediate results between two USQL scripts

CREATE DATABASE IF NOT EXISTS sQDB;
USE DATABASE sQDB;

////////////////////////////////////////////////
// Names of input and output directories 
////////////////////////////////////////////////

DECLARE @StaticDataFolder string = "/publicparameters/";
DECLARE @DynamicDataFolder string = "/rawdata/";
DECLARE @GlobalCSVFolder string = "/optimization/input_csv/";
DECLARE @GlobalPolicyDir string = "/inventory_scripts/";

DECLARE @policy_name string = "sQ";
DECLARE @UsqlFolder string = @GlobalPolicyDir + @policy_name + "/";
DECLARE @CSVFolder string = @GlobalCSVFolder + @policy_name + "/";
DECLARE @DemandDir string = @DynamicDataFolder + "demand_forecasts/{*}/{*}/";
DECLARE @DemandFiles string = @DemandDir + 
                              "{ForecastDate:yyyy}-{ForecastDate:MM}-{ForecastDate:dd}_{ForecastDate:HH}_{ForecastDate:mm}_{ForecastDate:ss}.csv";

////////////////////////////////////////////////
// Names of input files
////////////////////////////////////////////////

DECLARE @ProductStorageFile = @StaticDataFolder + "store_product_storage.csv";
DECLARE @ProductsSuppliersFile string = @StaticDataFolder + "store_product_supplier.csv";
DECLARE @DepartmentsProductsFile string = @StaticDataFolder + "store_department_brand_products.csv";

/////////////////////////////////////////////
// Load input files
/////////////////////////////////////////////

@departments_products_all =
    EXTRACT StoreID        string,
            DepartmentID   string,
            BrandID        string,
            ProductID      string,
            [MSRP]         float,
            DisposalCost   float
    FROM @DepartmentsProductsFile
    USING Extractors.Csv(skipFirstNRows: 1);  

@departments_products = SELECT StoreID, ProductID, DisposalCost 
                        FROM @departments_products_all AS a
                        JOIN @departments AS b ON a.DepartmentID == b.DepartmentID;
                                                                
@product_storage_all =
    EXTRACT StoreID                string,
            StorageID              string,
            ProductID              string,
            StorageCost            float,
            MissedSaleCost         float,
            MinInventorySize       int,
            MaxInventorySize       int
    FROM @ProductStorageFile
    USING Extractors.Csv(skipFirstNRows: 1);  

@product_storage = SELECT a.* FROM @product_storage_all AS a
                   JOIN @departments_products AS b ON a.StoreID == b.StoreID AND a.ProductID == b.ProductID;

@product_suppliers_all = 
    EXTRACT StoreID                         string,
            SupplierID                      string,
            ProductID                       string,
            LeadTime                        int,
            LeadTimeConfidenceInterval      int,
            MinOrderQuantity                int,
            MaxOrderQuantity                int,
            QuantityMultiplier              int,
            PurchaseCost                    float,
            BackorderCost                   float,
            ShippingCost                    float,
            PurchaseCostBudget              float,
            OrderingFrequency               string,
            ServiceLevel                    float
    FROM @ProductsSuppliersFile
    USING Extractors.Csv(skipFirstNRows: 1); 

@product_suppliers = SELECT a.* FROM @product_suppliers_all AS a
                     JOIN @departments_products AS b ON a.StoreID == b.StoreID AND a.ProductID == b.ProductID;

@predicted_demand_all = 
    EXTRACT StoreID                         string,
            ProductID                       string,
            Timestamp                       DateTime,
            PredictedDemand                 float,
            PredictedDemandDistribution     string,
            PredictedDemandVariance         float,
            PredictedProbability            float,
            ForecastDate                    DateTime
    FROM @DemandFiles
    USING Extractors.Csv(skipFirstNRows: 1); 

@predicted_demand = SELECT a.* FROM @predicted_demand_all AS a
                    JOIN @departments_products AS b ON a.StoreID == b.StoreID AND a.ProductID == b.ProductID;

///////////////////////////////////////////////
// create table of storage costs
///////////////////////////////////////////////

DROP TABLE IF EXISTS dbo.StorageCosts;
CREATE TABLE dbo.StorageCosts (
    INDEX clx_ProductID CLUSTERED(ProductID ASC) 
    DISTRIBUTED BY HASH (ProductID)
) AS SELECT StoreID, ProductID, StorageCost FROM @product_storage;

///////////////////////////////////////////////
// create table of shipping costs
//////////////////////////////////////////////

DROP TABLE IF EXISTS dbo.SupplierCosts;
CREATE TABLE dbo.SupplierCosts (
    INDEX clx_ProductID CLUSTERED(ProductID ASC) 
    DISTRIBUTED BY HASH (ProductID)
) AS SELECT StoreID, ProductID, ShippingCost, BackorderCost FROM @product_suppliers;

/////////////////////////////////////////////////////////////////////////////////////////////////////
// Create table of mean lead demand, maximal lead demand and total demand for a planning time period
////////////////////////////////////////////////////////////////////////////////////////////////////

@last_forecast_time = SELECT StoreID, ProductID, Convert.ToDateTime(MAX(ForecastDate)) AS LastForecastDate 
                      FROM @predicted_demand GROUP BY StoreID, ProductID;

@last_forecast = SELECT a.StoreID, a.ProductID, Timestamp, PredictedDemand, PredictedProbability 
                 FROM @predicted_demand AS a 
                 JOIN @last_forecast_time AS b 
                 ON a.ProductID == b.ProductID AND a.StoreID == b.StoreID AND ForecastDate == LastForecastDate;

@mean_last_forecast = SELECT StoreID, ProductID, Timestamp, SUM(PredictedDemand * PredictedProbability) AS MeanDemand, 
                             MAX(PredictedProbability) AS MaxProbability
                      FROM @last_forecast GROUP BY StoreID, ProductID, Timestamp;                                                    

// compute mean daily demand in the planning time period

@mean_demand = SELECT StoreID, ProductID, Convert.ToDouble(AVG(MeanDemand)) AS MeanDemand
               FROM @mean_last_forecast WHERE Timestamp BETWEEN @now AND @last_day
               GROUP BY StoreID, ProductID;

// compute mean demand in the lead time (average of the mean demands over lead time periods)

DECLARE @myScript = @"
import pandas as pd

def usqlml_main(df):
    return pd.DataFrame({'t': range(0,df.iat[0,0])})
";

@t_indices = REDUCE (SELECT * FROM (VALUES(@planning_time)) AS T([T])) ON [T]
             PRODUCE t int 
             USING new Extension.Python.Reducer(pyScript:@myScript);

@mean_last_forecast_lead_time = SELECT a.StoreID, a.ProductID, t, Convert.ToDouble(SUM(MeanDemand)) AS MeanLeadDemand
                                FROM @mean_last_forecast AS a
                                JOIN @product_suppliers AS b ON a.ProductID == b.ProductID AND a.StoreID == b.StoreID
                                CROSS JOIN @t_indices AS c
                                WHERE c.t + LeadTime < @planning_time 
                                      AND Timestamp BETWEEN @now.Add(new System.TimeSpan(c.t, 0, 0, 0))
                                      AND @now.Add(new System.TimeSpan(c.t + LeadTime - 1, 0, 0, 0))
                                GROUP BY a.StoreID, a.ProductID, t;

@mean_lead_demand = SELECT StoreID, ProductID, Convert.ToDouble(AVG(MeanLeadDemand)) AS MeanLeadDemand 
                    FROM @mean_last_forecast_lead_time GROUP BY StoreID, ProductID;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
// Choose a representative lead time interval, select probabilistic demand forecast from this interval
/////////////////////////////////////////////////////////////////////////////////////////////////////////

// generate probabilistic forecasts if the input forecast is deterministic

@python_input = SELECT StoreID, ProductID, Timestamp.ToString() AS Timestamp, PredictedDemand, PredictedProbability 
                FROM @last_forecast; 

DECLARE @generateProbabilisticForecast = @"
import pandas as pd
from scipy.stats import poisson
from numpy import concatenate

def usqlml_main(df):
    if df['PredictedProbability'].min() == 1: # deterministic prediction, assume that the demand has Poisson distribution
       
       df.sort_values(['Timestamp'], inplace=True)

       demand = [range(int(poisson.ppf(0.01,x)),int(poisson.ppf(0.99,x))) for x in df['PredictedDemand']]
       mean = [[x]*len(y) for x,y in zip(df['PredictedDemand'],demand)]
       probabilities = poisson.pmf(concatenate(demand),concatenate(mean))
     
       probabilistic_forecast_df = pd.DataFrame({'StoreID': df['StoreID'].iat[0], 
                                                 'ProductID': df['ProductID'].iat[0], 
                                                 'Timestamp': concatenate([[x]*len(y) for x,y in zip(df['Timestamp'],demand)]),
                                                 'PredictedDemand': concatenate(demand),
                                                 'PredictedProbability': probabilities},
                                                 columns = ['StoreID', 'ProductID', 'Timestamp', 'PredictedDemand', 
                                                            'PredictedProbability'])

       total_probabilities = probabilistic_forecast_df.groupby(['Timestamp'], sort=False)['PredictedProbability'].sum()
       total_probabilities_expanded = concatenate([[x]*len(y) for x,y in zip(total_probabilities,demand)])
       probabilistic_forecast_df['PredictedProbability'] = probabilistic_forecast_df['PredictedProbability'] / total_probabilities_expanded

       return probabilistic_forecast_df
    else:
       return df
";

@python_output = REDUCE @python_input ON StoreID, ProductID
                 PRODUCE StoreID string, 
                         ProductID string,
                         Timestamp string,
                         PredictedDemand int,
                         PredictedProbability double
                 USING new Extension.Python.Reducer(pyScript:@generateProbabilisticForecast);

@probabilistic_forecast = SELECT StoreID, ProductID, Convert.ToDateTime(Timestamp) AS Timestamp, PredictedDemand,
                                 PredictedProbability FROM @python_output;

// choose a representative lead time interval - lead time interval with the mean demand closest to the global mean

@distance_to_mean = SELECT a.StoreID, a.ProductID, t, Math.Abs(a.MeanLeadDemand - b.MeanLeadDemand) AS distance
                    FROM @mean_last_forecast_lead_time AS a
                    JOIN @mean_lead_demand AS b ON a.StoreID == b.StoreID AND a.ProductID == b.ProductID;

@min_distance_to_mean = SELECT StoreID, ProductID, Convert.ToDouble(MIN(distance)) AS min_distance
                        FROM @distance_to_mean GROUP BY StoreID, ProductID;

@representative_interval = SELECT a.StoreID, a.ProductID, Convert.ToInt32(MIN(t)) AS t_min 
                           FROM @distance_to_mean AS a JOIN @min_distance_to_mean AS b 
                           ON a.StoreID == b.StoreID AND a.ProductID == b.ProductID AND distance == min_distance                                
                           GROUP BY a.StoreID, a.ProductID;

@representative_forecast = SELECT a.StoreID, a.ProductID, Timestamp, PredictedDemand, PredictedProbability
                           FROM @probabilistic_forecast AS a
                           JOIN @product_suppliers AS b ON a.ProductID == b.ProductID AND a.StoreID == b.StoreID
                           JOIN @representative_interval AS c ON a.ProductID == c.ProductID AND a.StoreID == c.StoreID                            
                           WHERE c.t_min + LeadTime < @planning_time 
                               AND Timestamp BETWEEN @now.Add(new System.TimeSpan(c.t_min, 0, 0, 0))
                               AND @now.Add(new System.TimeSpan(c.t_min + LeadTime - 1, 0, 0, 0));

///////////////////////////////////////////////////////////////////////////////////////
// Compute probabilitistic forecasts of demand over representative lead time 
///////////////////////////////////////////////////////////////////////////////////////

@python_input2 = SELECT StoreID, ProductID, Timestamp.ToString() AS Timestamp, PredictedDemand, PredictedProbability
                 FROM @representative_forecast;

DECLARE @computeAggregateForecast = @"
import pandas as pd

def usqlml_main(df):
    
    df['Timestamp'] = df['Timestamp'].apply(lambda x: pd.to_datetime(x if x[0]!='b' else x.split(chr(39))[1]))
    timestamps = df['Timestamp'].unique()
    timestamps.sort()  # in-place sort of timestamps

    agg = pd.Series([1], index=[0])
    for timestamp in timestamps:
        agg_new = pd.Series()
        for x in df.loc[df['Timestamp'] == timestamp].itertuples():
            agg_x = pd.Series(agg.values * x.PredictedProbability, index = agg.index + x.PredictedDemand)
            agg_new = agg_new.add(agg_x, fill_value=0)
        agg = agg_new

    return pd.DataFrame({'StoreID': [df['StoreID'].iat[0]]*len(agg), 'ProductID': [df['ProductID'].iat[0]] * len(agg), 
                         'PredictedDemand': agg.index.astype('object').astype('int'), 'PredictedProbability': agg.values}, 
                        columns = ['StoreID', 'ProductID', 'PredictedDemand', 'PredictedProbability'])
";

@aggregate_forecast = REDUCE @python_input2 ON StoreID, ProductID
                      PRODUCE StoreID string,
                              ProductID string,
                              PredictedDemand int,
                              PredictedProbability double
USING new Extension.Python.Reducer(pyScript:@computeAggregateForecast);                              

///////////////////////////////////////////////////////////////////////////////////
// generate a table with mean daily demand, mean lead demand and max lead demand 
///////////////////////////////////////////////////////////////////////////////////

// compute max demand in the lead time
@max_demand_lead_time = SELECT StoreID, ProductID, MAX(PredictedDemand) AS MaxLeadDemand FROM @aggregate_forecast
                        GROUP BY StoreID, ProductID;

// combine mean daily demand, mean lead demand and max lead demand into a single table
@total_lead_demand = SELECT a.StoreID, a.ProductID, Convert.ToInt32(Math.Round(MeanDemand,0)) AS MeanDemand, 
                            Convert.ToInt32(Math.Round(MeanLeadDemand,0)) AS MeanLeadDemand, MaxLeadDemand
                     FROM @mean_demand AS a JOIN @mean_lead_demand AS b ON a.ProductID == b.ProductID AND a.StoreID == b.StoreID 
                     JOIN @max_demand_lead_time  AS c ON a.ProductID == c.ProductID AND a.StoreID == c.StoreID;

DROP TABLE IF EXISTS dbo.DemandData;
CREATE TABLE dbo.DemandData (
    INDEX clx_ProductID CLUSTERED(ProductID ASC) 
    DISTRIBUTED BY HASH (ProductID)
) AS SELECT * FROM @total_lead_demand;

///////////////////////////////////////////////////////////////////////////////////////
// Create table of probabilities of large demand in the lead time
///////////////////////////////////////////////////////////////////////////////////////

@forecast_big_demand = SELECT a.StoreID, a.ProductID, PredictedDemand, PredictedProbability FROM @aggregate_forecast AS a
                       JOIN @total_lead_demand AS b ON a.StoreID == b.StoreID AND a.ProductID == b.ProductID
                       WHERE PredictedDemand > MeanLeadDemand;

DROP TABLE IF EXISTS dbo.ForecastBigDemand;
CREATE TABLE dbo.ForecastBigDemand (
    INDEX clx_ProductID CLUSTERED(ProductID ASC) 
    DISTRIBUTED BY HASH (ProductID)
) AS SELECT * FROM @forecast_big_demand;

/////////////////////////////////////////////////////////////////////////////
// Generate second USQL script that will create CSV files for all stores
/////////////////////////////////////////////////////////////////////////////

// Get IDs of all stores and products

@store_product_ids = SELECT StoreID, ProductID FROM @product_storage;

@stmts =
    SELECT * FROM (VALUES (1,"USE DATABASE sQDB;")) AS i(id, output)
    UNION ALL
    SELECT 2 AS id,
           "OUTPUT (SELECT MeanDemand AS a FROM dbo.DemandData WHERE StoreID == \"" + StoreID + 
                    "\" AND ProductID == \"" + ProductID + "\") " + 
           "TO \"" + @CSVFolder + StoreID + "/" + ProductID + "/sQ_1_P_0_" + StoreID + "_" + ProductID +
           ".csv\" USING Outputters.Csv(outputHeader: true, quoting: false);" AS output
    FROM @store_product_ids
    UNION ALL
    SELECT 3 AS id,
           "OUTPUT (SELECT StorageCost AS h FROM dbo.StorageCosts WHERE StoreID == \"" + StoreID + 
                    "\" AND ProductID == \"" + ProductID + "\") " +
           "TO \"" + @CSVFolder + StoreID + "/" + ProductID + "/sQ_2_P_0_" + StoreID + "_" + ProductID +
           ".csv\" USING Outputters.Csv(outputHeader: true, quoting: false);" AS output
    FROM @store_product_ids
    UNION ALL
    SELECT 4 AS id, 
           "OUTPUT (SELECT ShippingCost AS [K] FROM dbo.SupplierCosts WHERE StoreID == \"" + StoreID + 
                    "\" AND ProductID == \"" + ProductID + "\") " +
           "TO \"" + @CSVFolder + StoreID + "/" + ProductID + "/sQ_3_P_0_" + StoreID + "_" + ProductID + 
           ".csv\" USING Outputters.Csv(outputHeader: true, quoting: false);" AS output
    FROM @store_product_ids
    UNION ALL
    SELECT 5 AS id, 
           "OUTPUT (SELECT MaxLeadDemand AS max_demand FROM dbo.DemandData WHERE StoreID == \"" + StoreID + 
                    "\" AND ProductID == \"" + ProductID + "\") " +
           "TO \"" + @CSVFolder + StoreID + "/" + ProductID + "/sQ_4_P_0_" + StoreID + "_" + ProductID + 
           ".csv\" USING Outputters.Csv(outputHeader: true, quoting: false);" AS output
    FROM @store_product_ids                
    UNION ALL
    SELECT 6 AS id, 
           "OUTPUT (SELECT MeanLeadDemand AS mu FROM dbo.DemandData WHERE StoreID == \"" + StoreID + 
                    "\" AND ProductID == \"" + ProductID + "\") " +
           "TO \"" + @CSVFolder + StoreID + "/" + ProductID + "/sQ_5_P_0_" + StoreID + "_" + ProductID + 
           ".csv\" USING Outputters.Csv(outputHeader: true, quoting: false);" AS output
    FROM @store_product_ids
    UNION ALL
    SELECT 7 AS id, 
           "OUTPUT (SELECT BackorderCost AS pi FROM dbo.SupplierCosts WHERE StoreID == \"" + StoreID + 
                    "\" AND ProductID == \"" + ProductID + "\") " +
           "TO \"" + @CSVFolder + StoreID + "/" + ProductID + "/sQ_6_P_0_" + StoreID + "_" + ProductID + 
           ".csv\" USING Outputters.Csv(outputHeader: true, quoting: false);" AS output
    FROM @store_product_ids
    UNION ALL      
    SELECT 8 AS id, 
           "OUTPUT (SELECT PredictedDemand AS big_demand, PredictedProbability AS prob_demand FROM dbo.ForecastBigDemand " +
                    "WHERE StoreID == \"" + StoreID + "\" AND ProductID == \"" + ProductID + "\") " +
           "TO \"" + @CSVFolder + StoreID + "/" + ProductID + "/sQ_7_P_1_" + StoreID + "_" + ProductID + 
           ".csv\" USING Outputters.Csv(outputHeader: true, quoting: false);" AS output
    FROM @store_product_ids;

// Write USQL commands to the second script

DECLARE @outfile string = @UsqlFolder + "genscript_sQ.usql";

OUTPUT (SELECT output FROM @stmts ORDER BY id ASC OFFSET 0 ROWS) TO @outfile
USING Outputters.Text(delimiter: ' ', quoting: false);
