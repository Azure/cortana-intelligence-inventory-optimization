// This inventory optimization policy is used for all products in all stores with SupplierID = '2'. 
// We also assume that each product is supplied by exactly one supplier.

DECLARE @SupplierID string = "2";  
DECLARE @period_length int = 7; // number of days in each time period
DECLARE @now DateTime = DateTime.Now;
DECLARE @last_day DateTime = @now.Add(new System.TimeSpan(@period_length - 1, 0, 0, 0));

// Use internal database for transferring intermediate results between two USQL scripts
CREATE DATABASE IF NOT EXISTS NewsvendorDB; 
USE DATABASE NewsvendorDB;

////////////////////////////////////////////////
// Names of input and output directories 
////////////////////////////////////////////////

DECLARE @StaticDataFolder string = "/publicparameters/";
DECLARE @DynamicDataFolder string = "/rawdata/";
DECLARE @GlobalCSVFolder string = "/optimization/input_csv/";
DECLARE @GlobalPolicyDir string = "/inventory_scripts/";

DECLARE @policy_name string = "newsvendor";

DECLARE @UsqlFolder string = @GlobalPolicyDir + @policy_name + "/";
DECLARE @CSVFolder string = @GlobalCSVFolder + @policy_name + "/";

////////////////////////////////////////////////
// Names of input files
////////////////////////////////////////////////

DECLARE @SuppliersFile string = @StaticDataFolder + "suppliers.csv";
DECLARE @ProductsSuppliersFile string = @StaticDataFolder + "store_product_supplier.csv";
DECLARE @ProductStorageFile = @StaticDataFolder + "store_product_storage.csv";
DECLARE @DemandDir string = @DynamicDataFolder + "demand_forecasts/{*}/{*}/";
DECLARE @DemandFiles string = @DemandDir + 
                              "{ForecastDate:yyyy}-{ForecastDate:MM}-{ForecastDate:dd}_{ForecastDate:HH}_{ForecastDate:mm}_{ForecastDate:ss}.csv";

/////////////////////////////////////////////
// Load input files
/////////////////////////////////////////////

@suppliers = 
    EXTRACT SupplierID          string,
            SupplierName        string,
            ShippingCost        string,
            MaxShippingVolume   float,
            MinShippingVolume   float,
            FixedOrderSize      int,
            PurchaseCostBudget  float
    FROM @SuppliersFile
    USING Extractors.Csv(skipFirstNRows: 1); 

@product_suppliers = 
    EXTRACT StoreID                         string,
            SupplierID                      string,
            ProductID                       string,
            LeadTime                        int,
            LeadTimeConfidenceInterval      int,
            MinOrderQuantity                int,
            MaxOrderQuantity                int,
            QuantityMultiplier              int,
            PurchaseCost                    float,
            BackorderCost                   float,
            ShippingCost                    float,
            PurchaseCostBudget              float,
            OrderingFrequency               string,
            ServiceLevel                    float
    FROM @ProductsSuppliersFile
    USING Extractors.Csv(skipFirstNRows: 1); 

@products_storage =
    EXTRACT StoreID                string,
            StorageID              string,
            ProductID              string,
            StorageCost            float,
            MissedSaleCost         float,
            MinInventorySize       int,
            MaxInventorySize       int
    FROM @ProductStorageFile
    USING Extractors.Csv(skipFirstNRows: 1);  

@predicted_demand = 
    EXTRACT StoreID                         string,
            ProductID                       string,
            Timestamp                       DateTime,
            PredictedDemand                 float,
            PredictedDemandDistribution     string,
            PredictedDemandVariance         float,
            PredictedProbability            float,
            ForecastDate                    DateTime
    FROM @DemandFiles
    USING Extractors.Csv(skipFirstNRows: 1); 

/////////////////////////////////////////////////////////////////
// Create purchase budget table
//////////////////////////////////////////////////////////////////

DROP TABLE IF EXISTS dbo.PurchaseBudget;
CREATE TABLE dbo.PurchaseBudget (
    INDEX clx_StoreID CLUSTERED(StoreID ASC) 
    DISTRIBUTED BY HASH (StoreID)
) AS 
SELECT DISTINCT a.StoreID, b.PurchaseCostBudget FROM @product_suppliers AS a 
JOIN @suppliers AS b ON a.SupplierID == b.SupplierID
WHERE b.SupplierID == @SupplierID AND a.SupplierID == @SupplierID;

//////////////////////////////////////////////////////////////////////////////////
// Create product ID table for the product that are supplier by SupplierID = 2
/////////////////////////////////////////////////////////////////////////////////

@store_products = SELECT StoreID, ProductID FROM @product_suppliers WHERE SupplierID == @SupplierID;

DROP TABLE IF EXISTS dbo.StoreProduct;
CREATE TABLE dbo.StoreProduct (
    INDEX clx_StoreID CLUSTERED(StoreID ASC) 
    DISTRIBUTED BY HASH (StoreID)
) AS 
SELECT StoreID, ProductID FROM @store_products;

////////////////////////////////////////////////////////////////////////////////
// Create table of demand, holding cost, purchase costs and missed sale cost
////////////////////////////////////////////////////////////////////////////////

@predicted_demand_store = SELECT a.StoreID, a.ProductID, Timestamp, PredictedDemand, ForecastDate 
                          FROM @predicted_demand AS a JOIN @store_products AS b 
                          ON a.StoreID == b.StoreID AND a.ProductID == b.ProductID;

@last_forecast_time = SELECT StoreID, ProductID, Convert.ToDateTime(MAX(ForecastDate)) AS LastForecastDate 
                      FROM @predicted_demand_store GROUP BY StoreID, ProductID;

@latest_predicted_demand = SELECT a.StoreID, a.ProductID, SUM(PredictedDemand) AS demand
                           FROM @predicted_demand_store AS a 
                           JOIN @last_forecast_time AS b ON a.StoreID == b.StoreID AND
                                                            a.ProductID == b.ProductID AND ForecastDate == LastForecastDate
                           WHERE Timestamp BETWEEN @now AND @last_day GROUP BY a.StoreID, a.ProductID;

@demand_costs = SELECT a.*, b.StorageCost, c.PurchaseCost, b.MissedSaleCost FROM @latest_predicted_demand AS a
                JOIN @products_storage AS b ON a.StoreID == b.StoreID AND a.ProductID == b.ProductID
                JOIN @product_suppliers AS c ON a.StoreID == c.StoreID AND a.ProductID == c.ProductID;

DROP TABLE IF EXISTS dbo.DemandCosts;
CREATE TABLE dbo.DemandCosts (
    INDEX clx_StoreID CLUSTERED(StoreID ASC) 
    DISTRIBUTED BY HASH (StoreID)
) AS SELECT * FROM @demand_costs;

/////////////////////////////////////////////////////////////////////////////
// Generate second USQL script that will create CSV files for all stores
/////////////////////////////////////////////////////////////////////////////

// Get IDs of all stores

@store_ids = SELECT DISTINCT StoreID FROM @product_suppliers;

// Create USQL commands to be writted in the second script

@stmts = 
    SELECT * FROM (VALUES (1,"USE DATABASE NewsvendorDB;")) AS i(id, output)
    UNION ALL
    SELECT 2 AS id, "OUTPUT (SELECT ProductID AS [S] FROM dbo.StoreProduct "+
                    "WHERE StoreID == \"" + StoreID + "\" ORDER BY [S] OFFSET 0 ROWS) " +
           "TO \"" + @CSVFolder + StoreID + "/newsvendor_1_S_0_" + StoreID + 
           ".csv\" USING Outputters.Csv(outputHeader: true, quoting: false);" AS output
    FROM @store_ids
    UNION ALL
    SELECT 3 AS id, "OUTPUT (SELECT PurchaseCostBudget AS [V] " +
                    "FROM dbo.PurchaseBudget WHERE StoreID == \"" + StoreID + "\") " +
                    "TO \"" + @CSVFolder + StoreID + "/newsvendor_2_P_0_" + StoreID + 
                    ".csv\" USING Outputters.Csv(outputHeader: true, quoting: false);" AS output  
    FROM @store_ids
    UNION ALL     
    SELECT 4 AS id, "OUTPUT (SELECT ProductID AS [S], demand, StorageCost AS [h], PurchaseCost AS [c], MissedSaleCost AS [b] " +
                    "FROM dbo.DemandCosts WHERE StoreID == \"" + StoreID + "\" ORDER BY [S] OFFSET 0 ROWS) " +
                    "TO \"" + @CSVFolder + StoreID + "/newsvendor_3_P_1_" + StoreID + 
                    ".csv\" USING Outputters.Csv(outputHeader: true, quoting: false);" AS output  
    FROM @store_ids;
         
// Write USQL commands to the second script

DECLARE @outfile string = @UsqlFolder + "genscript_newsvendor.usql";

OUTPUT (SELECT output FROM @stmts ORDER BY id ASC OFFSET 0 ROWS) TO @outfile
USING Outputters.Text(delimiter: ' ', quoting: false);
